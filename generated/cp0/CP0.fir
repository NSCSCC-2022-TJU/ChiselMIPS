circuit CP0 :
  module CP0 :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip index : UInt<5>, flip datain : UInt<32>, flip CP0ctr : UInt<4>, dataout : UInt<32>, flip BD : UInt<1>, flip Status : UInt<32>, flip ExcCode : UInt<5>, flip BadVAddr : UInt<32>, flip EPC : UInt<32>, flip IsExc : UInt<1>, ExcHapp : UInt<1>, IF_ID_Flush : UInt<1>, ID_EX_Flush : UInt<1>, EX_MEM_Flush : UInt<1>, MEM_WB_Flush : UInt<1>}

    cmem RegFile : UInt<32> [32] @[CP0.scala 28:26]
    node _T = eq(io.CP0ctr, UInt<4>("h9")) @[CP0.scala 38:24]
    when _T : @[CP0.scala 38:34]
      infer mport MPORT = RegFile[io.index], clock @[CP0.scala 39:24]
      MPORT <= io.datain @[CP0.scala 39:35]
      io.dataout <= UInt<1>("h0") @[CP0.scala 40:28]
      io.IF_ID_Flush <= UInt<1>("h0") @[CP0.scala 31:32]
      io.ID_EX_Flush <= UInt<1>("h0") @[CP0.scala 32:32]
      io.EX_MEM_Flush <= UInt<1>("h0") @[CP0.scala 33:33]
      io.MEM_WB_Flush <= UInt<1>("h0") @[CP0.scala 34:33]
      io.ExcHapp <= UInt<1>("h0") @[CP0.scala 35:28]
    else :
      node _T_1 = eq(io.CP0ctr, UInt<4>("h8")) @[CP0.scala 44:30]
      when _T_1 : @[CP0.scala 44:40]
        infer mport io_dataout_MPORT = RegFile[io.index], clock @[CP0.scala 45:38]
        io.dataout <= io_dataout_MPORT @[CP0.scala 45:28]
        io.IF_ID_Flush <= UInt<1>("h0") @[CP0.scala 31:32]
        io.ID_EX_Flush <= UInt<1>("h0") @[CP0.scala 32:32]
        io.EX_MEM_Flush <= UInt<1>("h0") @[CP0.scala 33:33]
        io.MEM_WB_Flush <= UInt<1>("h0") @[CP0.scala 34:33]
        io.ExcHapp <= UInt<1>("h0") @[CP0.scala 35:28]
      else :
        node _T_2 = eq(io.CP0ctr, UInt<4>("hf")) @[CP0.scala 50:30]
        when _T_2 : @[CP0.scala 50:39]
          infer mport io_dataout_MPORT_1 = RegFile[UInt<4>("he")], clock @[CP0.scala 51:38]
          io.dataout <= io_dataout_MPORT_1 @[CP0.scala 51:28]
          node _T_3 = gt(io.dataout, UInt<24>("hffffff")) @[CP0.scala 53:33]
          when _T_3 : @[CP0.scala 53:48]
            node _cause_T = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 74:12]
            node cause_lo = cat(io.ExcCode, UInt<2>("h0")) @[Cat.scala 31:58]
            node cause_hi = cat(io.BD, _cause_T) @[Cat.scala 31:58]
            node cause = cat(cause_hi, cause_lo) @[Cat.scala 31:58]
            infer mport MPORT_1 = RegFile[UInt<4>("hd")], clock @[CP0.scala 55:32]
            MPORT_1 <= cause @[CP0.scala 55:39]
            infer mport MPORT_2 = RegFile[UInt<4>("he")], clock @[CP0.scala 56:32]
            MPORT_2 <= io.EPC @[CP0.scala 56:39]
            infer mport MPORT_3 = RegFile[UInt<4>("h8")], clock @[CP0.scala 57:32]
            infer mport MPORT_4 = RegFile[UInt<4>("he")], clock @[CP0.scala 57:48]
            MPORT_3 <= MPORT_4 @[CP0.scala 57:38]
            infer mport MPORT_5 = RegFile[UInt<4>("hc")], clock @[CP0.scala 58:32]
            MPORT_5 <= io.Status @[CP0.scala 58:39]
            io.IF_ID_Flush <= UInt<1>("h1") @[CP0.scala 60:40]
            io.ID_EX_Flush <= UInt<1>("h1") @[CP0.scala 61:40]
            io.EX_MEM_Flush <= UInt<1>("h1") @[CP0.scala 62:41]
            io.MEM_WB_Flush <= UInt<1>("h0") @[CP0.scala 63:41]
            io.ExcHapp <= UInt<1>("h1") @[CP0.scala 64:36]
          else :
            io.IF_ID_Flush <= UInt<1>("h0") @[CP0.scala 31:32]
            io.ID_EX_Flush <= UInt<1>("h0") @[CP0.scala 32:32]
            io.EX_MEM_Flush <= UInt<1>("h0") @[CP0.scala 33:33]
            io.MEM_WB_Flush <= UInt<1>("h0") @[CP0.scala 34:33]
            io.ExcHapp <= UInt<1>("h0") @[CP0.scala 35:28]
        else :
          when io.IsExc : @[CP0.scala 74:31]
            node _cause_T_1 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 74:12]
            node cause_lo_1 = cat(io.ExcCode, UInt<2>("h0")) @[Cat.scala 31:58]
            node cause_hi_1 = cat(io.BD, _cause_T_1) @[Cat.scala 31:58]
            node cause_1 = cat(cause_hi_1, cause_lo_1) @[Cat.scala 31:58]
            infer mport MPORT_6 = RegFile[UInt<4>("hd")], clock @[CP0.scala 76:32]
            MPORT_6 <= cause_1 @[CP0.scala 76:39]
            infer mport MPORT_7 = RegFile[UInt<4>("he")], clock @[CP0.scala 77:32]
            MPORT_7 <= io.EPC @[CP0.scala 77:39]
            infer mport MPORT_8 = RegFile[UInt<4>("h8")], clock @[CP0.scala 78:32]
            MPORT_8 <= io.BadVAddr @[CP0.scala 78:38]
            infer mport MPORT_9 = RegFile[UInt<4>("hc")], clock @[CP0.scala 79:32]
            MPORT_9 <= io.Status @[CP0.scala 79:39]
            io.dataout <= UInt<1>("h0") @[CP0.scala 81:36]
            io.IF_ID_Flush <= UInt<1>("h1") @[CP0.scala 82:40]
            io.ID_EX_Flush <= UInt<1>("h1") @[CP0.scala 83:40]
            io.EX_MEM_Flush <= UInt<1>("h1") @[CP0.scala 84:41]
            io.MEM_WB_Flush <= UInt<1>("h0") @[CP0.scala 85:41]
            io.ExcHapp <= io.IsExc @[CP0.scala 86:36]
          else :
            io.dataout <= UInt<1>("h0") @[CP0.scala 88:36]
            io.IF_ID_Flush <= UInt<1>("h0") @[CP0.scala 31:32]
            io.ID_EX_Flush <= UInt<1>("h0") @[CP0.scala 32:32]
            io.EX_MEM_Flush <= UInt<1>("h0") @[CP0.scala 33:33]
            io.MEM_WB_Flush <= UInt<1>("h0") @[CP0.scala 34:33]
            io.ExcHapp <= UInt<1>("h0") @[CP0.scala 35:28]

