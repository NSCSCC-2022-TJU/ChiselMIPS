
package Pipeline

import chisel3._
import chisel3.util._

object Define {

  def I = 1.U(1.W)
  def O = 0.U(1.W)
  def X = 0.U(1.W)

  def ALU_Add = "b100000".U(6.W)
  def ALU_Addex = "b100001".U(6.W)
  def ALU_Sub = "b100010".U(6.W)
  def ALU_Subex = "b100011".U(6.W)
  def ALU_Mult = "b101000".U(6.W)
  def ALU_Multu = "b101001".U(6.W)
  def ALU_Div = "b101010".U(6.W)
  def ALU_Divu = "b101011".U(6.W)
  def ALU_And = "b100100".U(6.W)
  def ALU_Nor = "b100111".U(6.W)
  def ALU_Or  = "b100101".U(6.W)
  def ALU_Xor = "b100110".U(6.W)

  def ALU_Sll = "b000000".U(6.W)
  def ALU_Sllv = "b000100".U(6.W)
  def ALU_Sra = "b000011".U(6.W)
  def ALU_Srav = "b000111".U(6.W)
  def ALU_Srl = "b000010".U(6.W)
  def ALU_Srlv = "b000110".U(6.W)

  def MT_hi = "b010000".U(6.W)
  def MT_lo = "b010001".U(6.W)
  def MF_hi = "b010010".U(6.W)
  def MF_lo = "b010011".U(6.W)

  def ALU_Lui = "b111111".U(6.W)
  def ALU_X = "b111110".U(6.W)

  def Regsrc_Mem = "b01".U(3.W)
  def Regsrc_Alu = "b00".U(3.W)
  def Regsrc_CMP = "b10".U(3.W)
  def Regsrc_X = "b00".U(3.W)

  def CMP_equ = "b0000".U(4.W)
  def CMP_neq = "b0111".U(4.W)
  def CMP_slt = "b0001".U(4.W)
  def CMP_sltu = "b0010".U(4.W)
  def CMP_bgtz = "b0011".U(4.W)
  def CMP_bgez = "b0101".U(4.W)
  def CMP_blez = "b0110".U(4.W)
  def CMP_bltz = "b1010".U(4.W)
  def CMP_X = "b0100".U(4.W)

  def LS_B = "b1011".U(4.W)
  def LS_Bu = "b1100".U(4.W)
  def LS_H = "b1101".U(4.W)
  def LS_Hu = "b1110".U(4.W)

  def MF_CO = "b1000".U(4.W)
  def MT_CO = "b1001".U(4.W)
  def Eret = "b1111".U(4.W)

  def EX_N = "b00".U(2.W)
  def EX_bre = "b01".U(2.W)
  def EX_sys = "b10".U(2.W)
  def EX_res = "b11".U(2.W)







  def NOP        =   BitPat("b00000000000000000000000000000000")

  //14条算数

  def ADD        =   BitPat("b000000???????????????00000100000")

  def ADDI       =   BitPat("b001000??????????????????????????")

  def ADDU       =   BitPat("b000000???????????????00000100001")

  def ADDIU      =   BitPat("b001001??????????????????????????")

  def SUB        =   BitPat("b000000???????????????00000100010")

  def SUBU       =   BitPat("b000000???????????????00000100011")

  def SLT        =   BitPat("b000000???????????????00000101010")

  def SLTI       =   BitPat("b001010??????????????????????????")

  def SLTU       =   BitPat("b000000???????????????00000101011")

  def SLTIU      =   BitPat("b001011??????????????????????????")

  def DIV        =   BitPat("b000000??????????0000000000011010")

  def DIVU       =   BitPat("b000000??????????0000000000011011")

  def MULT       =   BitPat("b000000??????????0000000000011000")

  def MULTU      =   BitPat("b000000??????????0000000000011001")

  // 8 条逻辑
  def AND        =   BitPat("b000000???????????????00000100100")

  def ANDI       =   BitPat("b001100??????????????????????????")

  def LUI        =   BitPat("b00111100000?????????????????????")

  def NOR        =   BitPat("b000000???????????????00000100111")

  def OR         =   BitPat("b000000???????????????00000100101")

  def ORI        =   BitPat("b001101??????????????????????????")

  def XOR        =   BitPat("b000000???????????????00000100110")

  def XORI       =   BitPat("b001110??????????????????????????")

  // 6 条移位指令
  def SLLV       =   BitPat("b000000???????????????00000000100")

  def SLL        =   BitPat("b00000000000???????????????000000")

  def SRAV       =   BitPat("b000000???????????????00000000111")

  def SRA        =   BitPat("b00000000000???????????????000011")

  def SRLV       =   BitPat("b000000???????????????00000000110")

  def SRL        =   BitPat("b00000000000???????????????000010")

  // 12 条分支跳转
  def BEQ        =   BitPat("b000100??????????????????????????")
  def BNE        =   BitPat("b000101??????????????????????????")
  def BGEZ       =   BitPat("b000001?????00001????????????????")
  def BGTZ       =   BitPat("b000111?????00000????????????????")
  def BLEZ       =   BitPat("b000110?????00000????????????????")
  def BLTZ       =   BitPat("b000001?????00000????????????????")
  def BGEZAL     =   BitPat("b000001?????10001????????????????")
  def BLTZAL     =   BitPat("b000001?????10000????????????????")
  def J          =   BitPat("b000010??????????????????????????")
  def JAL        =   BitPat("b000011??????????????????????????")
  def JR         =   BitPat("b000000?????000000000000000001000")
  def JALR       =   BitPat("b000000?????00000?????00000001001")//rd=31(implied)?????or11111

  // 4 条数据移动
  def MFHI       =   BitPat("b0000000000000000?????00000010000")
  def MFLO       =   BitPat("b0000000000000000?????00000010010")
  def MTHI       =   BitPat("b000000?????000000000000000010001")
  def MTLO       =   BitPat("b000000?????000000000000000010011")

  // 2 条自陷
  def BREAK      =   BitPat("b000000????????????????????001101")
  def SYSCALL    =   BitPat("b000000????????????????????001100")

  // 8 条访存
  def LB         =   BitPat("b100000??????????????????????????")
  def LBU        =   BitPat("b100100??????????????????????????")
  def LH         =   BitPat("b100001??????????????????????????")
  def LHU        =   BitPat("b100101??????????????????????????")
  def LW         =   BitPat("b100011??????????????????????????")
  def SB         =   BitPat("b101000??????????????????????????")
  def SH         =   BitPat("b101001??????????????????????????")
  def SW         =   BitPat("b101011??????????????????????????")

  // 3 条特权
  def ERET       =   BitPat("b01000010000000000000000000011000")
  def MFC0       =   BitPat("b01000000000??????????00000000???")
  def MTC0       =   BitPat("b01000000100??????????00000000???")



}

